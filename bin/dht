#!/usr/bin/env bash
#
# Dev Helper Tools (DHT)
# MIT License

# === Define Directories ===
SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"

# === Load Configuration ===
load_config() {
  local DEFAULT_CONFIG="$ROOT_DIR/config/dht.conf"

  # Check if the default configuration file exists
  if [ -f "$DEFAULT_CONFIG" ]; then
    source "$DEFAULT_CONFIG"
  else
    echo "Warning: Default configuration file not found at '$DEFAULT_CONFIG'. Using default settings."
  fi

  # Load user-specific configuration
  local CONFIG_FILE="$HOME/.dht_config"
  if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
  fi

  # Default variables
  DHT_REMOTE="${DHT_REMOTE:-origin}"
  DHT_CACHE_DURATION="${DHT_CACHE_DURATION:-30}"
  DHT_EXCLUDE_BRANCHES="${DHT_EXCLUDE_BRANCHES:-main|master|develop}"
  CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/dht"
  mkdir -p "$CACHE_DIR"
  CACHE_FILE="$CACHE_DIR/branch"
}

# === Persist Configuration ===
persist_alias_configuration() {
  local CONFIG_FILE="$HOME/.dht_config"

  # Ensure the config file exists
  [ -f "$CONFIG_FILE" ] || touch "$CONFIG_FILE"

  # Update the configuration for each alias type based on user input
  if [[ "$ENABLE_GIT_ALIASES" == "true" ]]; then
    sed -i'' -e '/^DHT_LOAD_GIT_ALIASES=/d' "$CONFIG_FILE"
    echo "DHT_LOAD_GIT_ALIASES=true" >> "$CONFIG_FILE"
  fi

  if [[ "$ENABLE_LARAVEL_ALIASES" == "true" ]]; then
    sed -i'' -e '/^DHT_LOAD_LARAVEL_ALIASES=/d' "$CONFIG_FILE"
    echo "DHT_LOAD_LARAVEL_ALIASES=true" >> "$CONFIG_FILE"
  fi

  if [[ "$ENABLE_SYSTEM_ALIASES" == "true" ]]; then
    sed -i'' -e '/^DHT_LOAD_SYSTEM_ALIASES=/d' "$CONFIG_FILE"
    echo "DHT_LOAD_SYSTEM_ALIASES=true" >> "$CONFIG_FILE"
  fi

  if [[ "$DISABLE_GIT_ALIASES" == "true" ]]; then
    sed -i'' -e '/^DHT_LOAD_GIT_ALIASES=/d' "$CONFIG_FILE"
    echo "DHT_LOAD_GIT_ALIASES=false" >> "$CONFIG_FILE"
  fi

  if [[ "$DISABLE_LARAVEL_ALIASES" == "true" ]]; then
    sed -i'' -e '/^DHT_LOAD_LARAVEL_ALIASES=/d' "$CONFIG_FILE"
    echo "DHT_LOAD_LARAVEL_ALIASES=false" >> "$CONFIG_FILE"
  fi

  if [[ "$DISABLE_SYSTEM_ALIASES" == "true" ]]; then
    sed -i'' -e '/^DHT_LOAD_SYSTEM_ALIASES=/d' "$CONFIG_FILE"
    echo "DHT_LOAD_SYSTEM_ALIASES=false" >> "$CONFIG_FILE"
  fi

  echo "Alias configuration persisted to $CONFIG_FILE."
}

# === Load Aliases ===
load_aliases() {
  # Load Git aliases
  if [[ "$DHT_LOAD_GIT_ALIASES" == "true" ]]; then
    if [[ -f "$ROOT_DIR/aliases/git_aliases.zsh" ]]; then
      source "$ROOT_DIR/aliases/git_aliases.zsh"
      echo "Git aliases enabled."
    else
      echo "Warning: Git aliases file not found at '$ROOT_DIR/aliases/git_aliases.zsh'."
    fi
  fi

  # Load Laravel aliases
  if [[ "$DHT_LOAD_LARAVEL_ALIASES" == "true" ]]; then
    if [[ -f "$ROOT_DIR/aliases/laravel_aliases.zsh" ]]; then
      source "$ROOT_DIR/aliases/laravel_aliases.zsh"
      echo "Laravel aliases enabled."
    else
      echo "Warning: Laravel aliases file not found at '$ROOT_DIR/aliases/laravel_aliases.zsh'."
    fi
  fi

  # Load System aliases
  if [[ "$DHT_LOAD_SYSTEM_ALIASES" == "true" ]]; then
    if [[ -f "$ROOT_DIR/aliases/system_aliases.zsh" ]]; then
      source "$ROOT_DIR/aliases/system_aliases.zsh"
      echo "System aliases enabled."
    else
      echo "Warning: System aliases file not found at '$ROOT_DIR/aliases/system_aliases.zsh'."
    fi
  fi
}

# === Display Help ===
display_help() {
  echo "Usage: dht [options] [branch_name]"
  echo "Options:"
  echo "  -n                     Do not execute 'git pull' after checkout"
  echo "  -a                     Execute 'git fetch --all'"
  echo "  -c <cache_duration>    Set cache duration in minutes (default $DHT_CACHE_DURATION)"
  echo "  -p                     Remove local branches that no longer exist on the remote"
  echo "  -f                     Force switch branches even if there are uncommitted changes"
  echo "  -cl                    Clear the branch cache file"
  echo "  --alias                Open the interactive alias configuration menu"
  echo "  -h                     Display this help"
  echo "  -man                   Show the complete manual"
}

# === Display Manual ===
display_manual() {
  man "$ROOT_DIR/man/dht.1"
}

# === Parse Options ===
parse_options() {
  SYNC=true
  FETCH_ALL=false
  PRUNE=false
  FORCE=false
  CLEAR_CACHE=false
  SAVE_CONFIG=false
  OPEN_INTERACTIVE=false

  # Check if the first argument is '-man'
  if [[ "$1" == "-man" ]]; then
    display_manual
    exit 0
  fi

  # Custom option parsing to support multi-letter options
  while [[ "$1" == -* ]]; do
    case "$1" in
      -n) SYNC=false ;;
      -a) FETCH_ALL=true ;;
      -c) shift; DHT_CACHE_DURATION="$1" ;;
      -p) PRUNE=true ;;
      -f) FORCE=true ;;
      -cl) CLEAR_CACHE=true ;;
      --alias) OPEN_INTERACTIVE=true ;;
      -h)
        display_help
        exit 0
        ;;
      *)
        echo "Invalid option: $1"
        display_help
        exit 1
        ;;
    esac
    shift
  done

  BRANCH_NAME="$1"
}

# === Clear Cache ===
clear_cache() {
  if [ -f "$CACHE_FILE" ]; then
    rm "$CACHE_FILE"
    echo "Branch cache cleared."
  else
    echo "No cache file to clear."
  fi
}

# === Main Execution Flow ===
main() {
  load_config
  parse_options "$@"

  # Persist alias configuration if options were set
  if [[ "$SAVE_CONFIG" == "true" ]]; then
    persist_alias_configuration
  fi

  # Open interactive menu if the user selected the option
  if [[ "$OPEN_INTERACTIVE" == "true" ]]; then
    alias_configuration_menu
  fi

  # Clear cache if requested
  if $CLEAR_CACHE; then
    clear_cache
    exit 0
  fi

  # Load aliases based on options and configuration
  load_aliases
}

main "$@"